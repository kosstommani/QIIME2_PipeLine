NaN : Not a Number
NaN은 자바스크립트로는 나타낼 수 없는 숫자
자바스크립트는 복소수를 표현할 수 없다.
불 자료형으로 변환할 때는 Boolen() 함수를 이용
조건문을 사용하거나 논리 부정 연산자를 사용하면 자동으로 불 자료형으로 변환.
undefiend 자료형 false

자동으로 자료형이 변환되는 것을 막고 원하는 자료형을 확실하게 구분 짓고 싶다면 일치 연산자를 사용
===  양쪽 변의 자료형과 값이 일치한다.
!==  양쪽 변의 자료형과 값이 다르다.

템플릿 문자열 --> 표현식 결합을 간단하게 작성
템플릿 문자열은 "`" 기호로 감싸 만들며, 문자열 내부에 '${}'기호를 사용. 내부에 표현식을 넣으면, 문자열이 만들어질 때 표현식이 계산됨.

ECMAScript 5까지는 '식별자에 값을 넣어 활용하기 위한 기능'이 var키워드를 사용한 변수밖에 없었습니다.
ECMAScript 6부터는 'let 키워드를 사용한 변수', 'const 키워드를 사용한 상수'라는 개념이 추가되었다.
var : 변수 : 전역 스코프 : 재선언 가능
let : 변수 : 해당 스코프 : 재선언 불가능
const : 상수 : 해등 스코프 : 재선언 불가능
상수는 선언한 이후에 값을 변경할 수 없으므로, 선언할 때 반드시 값을 함께 넣어줘야 한다.
ECMAScript 6부터 상수라는 개념이 생긴 이유는 성능 향상 때문. --> 상수는 변할 가능성이 없으므로 '변한다'라는 속성과 관련된 처리를 할 필요가 없음
처리해야 할 것이 줄어들기 때문에 성능이 향상되는 것

웹 브라우저에서 실행되는 자바스크립트는 window 객체의 속성으로 변수가 선언됩니다.

let 키워드로 변수를 선억하고 재선언하면, 오류가 발생

조건문을 통해 실행되는 문장이 한 줄일 때는 중괄호를 생략할 수 있다.
모든 switch 조건문은 if 조건문으로 바꿀 수 있다. 하지만 범위를 조건으로 가지는 if 조건문을 switch 조건문으로 대체하기는 어렵다.

삼항 연산자 = 조건부 연산자
<불 표현식> ? <참일 때 실행하는 문장> : <거짓일 때 실행하는 문장>
삼항 연산자는 코드가 너무 복잡해질 수 있으므로 한 줄로 표시할 수 있을 때만 사용하는 것이 좋습니다.

자바스크립트는 이처럼 참이 확실할 때는 추가 연산을 진행하지 않습니다.
indexOf() 메서드는 '앞에 있는 문자열에 뒤에 있는 문자열이 포함되어 있을 경우 위치를 출력'해주는 메서드
문자열이 포함되어 있지 않으면 -1울 리턴한다.

배열. --> 객체
배열은 여러 개의 변수를 한꺼번에 선언해 다룰 수 있는 자료형.
배열은 객체 자료형 중 하나
대괄호[]
배열 안에 입력된 값을 요소(element)
어떠한 종류의 자료형도 요소가 될 수 있다.
가장 앞에 있는 요소를 0번째라고 표현
배열은 length 속성으로 현재 배열에 요소가 몇 개 있는지 확인할 수 있다.
push() 메소드는 배열에 요소를 추가하는 메소드.

문자열도 배열처럼 length 속성이 있으며 인덱스로 각각의 글자에 접근할 수 있다.

while 반복문이 조건에 비중을 두는 반복문이라면, for 반복문은 조건보다 횟수에 비중을 둘 때 사용하는 반복문.

for in 반복문  --> 객체의 프로퍼티, 배열의 index
자바스크립트는 배열이나 객체를 더욱 쉽게 다룰 수 있게 for in 반복문을 제공.
for in 반복문에 배열을 넣으면, 앞위 반복 변수에 '요소'가 아니라 '인덱스'가 들어간다.
ECMAScript 6에서는 for of 반복문이 추가. 반복 변수에 '요소'가 들어간다.
for of 반복문은 배열 이외에도 다양한 것(문자열, 맵, 세트 등)과 조합해서 사용할 수 있다.

웹 브라우저는 script 태그 내부의 내용을 한 줄씩 읽기 전에 선언적 함수부터 읽습니다.
자바스크립트는 함수를 생성할 때 함수에서 지정한 매개변수 개수보다 많거나 적은 매개변수를 사용하는 것을 허용한다.
원래 선언할 수 있는 매개변수보다 많은 수를 선언하면 일반적으로 추가된 매개변수는 무시.
선언할 수 있는 매개변수 숫자보다 적게 선언하면 지정하지 않는 매개변수는 undefined로 입력.
Array() : 빈 배열을 만든다.
Array(number) : 매개변수 값만큼의 크기를 가지는 배열을 만든다.
Array(any, ..., any) : 매개변수를 배열로 만든다.
자바스크립트의 모든 함수는 내부에 기본적으로 변수 arguments가 있다.
변수 arguments는 매개변수의 배열.
배열은 객체 자료형이므로 object를 출력

자기호출함수
(function () { ~~~~~})();

자바스크립트에서는 함수도 하나의 자료형이므로 매개변수로 전달할 수 있다.
이렇게 매개변수로 전달하는 함수를 콜백함수.

함수를 리턴하는 함수를 사용하는 가장 큰 이유는 클로저(closure)때문.

클로저의 정의는 워낙 다양합니다.
이렇게 지역 변수를 남겨두는 현상을 클로저라고 부르기도 하고,
함수 test() 내부의 변수들이 살아있는 것이므로 test() 함수로 생성된 공간을 클로저라고 부르기도 합니다.
또한 리턴된 함수 자체를 클로저라고 부르기도 하며, 살아남은 지역변수 output을 클로저라고 부르기도 합니다.
지역 변수 output을 남겨둔다고 외부에서 마음대로 사용할 수 있는 것은 아닙니다.
반드시 리턴된 클로저 함수를 사용해야 지역 변수 output을 사용할 수 있습니다.

인코딩은 문자를 컴퓨터에 저장하거나 통신에 사용할 목저긍로 부호화하는 방법.
웹에서는 통신할 때 한글 같은 유니코드 문자가 오작동을 일으킬 수 있으므로 인코딩해야 한다.
문자를 부호화하는 것이 인코딩이고, 반대로 문자를 원래대로 되돌리는 것이 디코딩.

eval() 함수는 문자열을 자바스크립트 코드로 실행하는 함수이므로 eval()함수로 실행된 코드에서 정의한 변수도 활용할 수 있다.

무한대의 수를 확인할 때는 반드시 isFinite() 함수를 사용.
NaN을 확인할 때는 반드시 isNaN() 함수를 사용.

자바스크립트의 함수 중에는 웹 브라우저에 처리를 부탁하는 함수가 있다.
대표적으로 타이머 함수와 웹 요청 관련 함수가 있으며, 웹 브라우저가 처리하고 처리가 완료되었다는 것을 자바스크립에 알려준다.
이러한 함수는 현재 실행 중인 다른 코드의 실행이 끝나기 전에는 실행되지 않는다.

기본 매개변수의 기초
매개변수를 입력하지 않았을 때, 매개변수를 강제로 초기화하는 것을 기본 매개변수라고 부릅니다.


화살표 함수
function () { } --> () => {}
내부에서 사용하는 this 키워드의 의미가 다름.
익명 함수 : 함수 자체에 바인딩되어 있는 객체(window 객체 또는 프로토타입 객체가 될 수도 있다.)
화살표 함수 : 전역 객체(웹 브라우저 환경에서는 window 객체)

화살표 함수를 사용할 때 전제 조건
1. 프로토타입을 사용하지 않고, ECMAScript 6에서 추가된 클래스를 사용할 때
2. jQuery의 문서 객체 조작에 this 키워드가 아니라, event.currentTarget을 사용할 때

코드가 한 줄이라면 중괄호 생략 가능.
return 키워드를 사용하지 않아도 값을 리턴.


함수에서의 전개 연산자 - ECMAScript 6
전개 연산자 - 마침표 3개(...)를 찍어 표기하는 연산자.
전개 연산자는 함수 또는 배열에 적용할 수 있다.
전개 연산자는 '가변 매개변수 함수'를 만들 때 사용.
arguments 객체를 사용해서 가변 매개변수 함수를 만들어도 전혀 문제가 없다.
다만 매개변수에 좀 더 명확한 이름을 붙일 수 있다는 가독성 측면에서는 전개 연산자를 사용하는 것이 더 좋다고 할 수 있음.
arguments 객체는 배열이 아닌 배열처럼 생긴 특별한 객체라는 의미에서 '배열 유사 객체'라고 말하기도 함.
실제로 arguments.constructor를 실행하면 'object'라고 출력.
다만 전개 연산자를 활용한 변수는 완전한 배열이라는 것이 하나의 이유가 될 수도 있다.

모든 함수에는 apply() 메서드가 있다.
apply() 메서드는 첫 매개변수로 '함수 내부에서 활용할 this 키워드 객체',
두 번째 매개변수로는 '매개변수 배열'을 넣게 된다.

자기 자신이 가진 속성이라는 것을 표시할 때는 this 키워드를 사용
--> 화살표 함수는 this를 바인딩하지 않으므로 this 키워드를 사용할려면 일반함수 사용!
자바스크릡트는 this 키워드를 생략할 수 없다.
단순 for 반복문으로 객체의 속성을 살펴보는 것이 불가능하다.
객체의 속성을 모두 살펴보려면 for in 반복문을 사용해야 한다.

in 키워드
in 키워드를 for 키워드와 별도로 사용하면 해당 키가 객체 안에 있는지 확인.

with 키워드
with 키워드는 복잡하게 사용해야 하는 코드를 짧게 줄여주는 키워드

NOTE with 키워드와 객체 충돌
만약 with 키워드를 사용하는 객체의 속성 이름과 외부 변수의 이름이 같으면 충돌이 발생합니다.
이 경우 자바스크립트는 객체의 속성을 우선합니다.
이렇게 객체의 속성 이름과 외부의 변수 이름이 같으면 with 키워드 내부에서 window 객체의 output 변수를 사용하겠다고 지정해주어야 한다.
window 객체는 이후에 배우는데, 웹 브라우저에서 동작하는 자바스크립트의 최상위 객체이다.
사실 웹 브라이저에서 동작하는 자바스크립트의 모든 변수와 함수는 window 객체의 속성과 메서드입니다.
alert()함수도 window.alert() 메서드 형태로 사용할 수 있습니다.

처음 객체를 생성하는 시점 이후에 속성을 추가하거나 제거하는 것을 "동적으로 속성을 추가한다." 또는 "동적으로 속성을 제거한다."고 표현.
동적으로 객체의 속성을 제거할 때는 delete 키워드를 사용한다.

현실에 존재하는 객체의 필요한 속성을 추출하는 작업을 추상화

자바스크립트는 함수로 값을 전달하고 싶을 때 객체를 사용하는 경우가 많다.
함수의 매개변수로 전달하는 객체를 일반적으로 '옵션객체'라고 부룸.
기본 매개변수처럼 값을 입력하지 않으면 초기화해주는 과정이 필요.

기본 자료형의 값 복사 - 깊은 복사
객체(배열 포함)의 참조 복사 - 얕은 복사
자바스크립트는 기본 자료형(숫자, 문자열, 불)을 복사할 때 값을 완전히 복사.

JSON.stringify() : 자바스크립트 값을 JSON 문자열로 변환.

전개 연산자를 사용한 배열 테크닉 - ECMAScript 6
전개 연산자를 사용하면 배열을 복제하거나 병합할 수 있다.
배열 병합
전개 연산자를 두 번 사용하면 배열을 병합할 수 있다.

프로토타입은 생성자 함수로 생성된 객체가 공틍으로 가지는 공간.
생성자 함수로 객체를 만들 때는 생성자 함수 내부에 속성만 넣는다.
메서드는 모두 프로토타입 안에 넣어줌.
함수안에 자동으로 만들어지는 arguments와 마찬가지로 자바스크립트의 모든 함수는 prototype을 갖는다.
prototype은 객체이다.

일반적으로 this 키워드를 사용하면 window 객체를 나타낸다.
따라서 일반적으로 함수를 호출하듯이 new 키워드를 사용하지 않으면, 함수를 실행하는 동안 window 객체에 속성을 추가한 것이 된다.
new 키워드로 함수를 호출하면 객체를 위한 공간을 만들고 this 키워드는 해당 공간을 의미하게 된다.

캡술화란 이렇게 잘못 사용될 수 있는 객체의 특정 부분을 사용자가 사용할 수 없게 막는 기술.
자바스크립트에서 캡슐화를 구현할 때 클로저를 활용.
캡슐화는 만일의 상황을 대비해서 특정 속성이나 메서드를 사용자가 사용할 수 없게 숨겨놓는 것

자바스크립트는 ECMAScript 6부터 '클래스 기반의 객체지향 언어' 이념을 도입했다.
호환성을 위해 클래스 형태로 작성하면, 이를 내부적으로 생성자 함수로 구현하는 것과 같게 변환.
따라서 클래스 기반의 객체지향 언어가 가지고 있는 모든 특성을 구현하지는 못한다.
ECMAScript 6의 클래스는 변수를 숨길 수 없습니다.
get을 붙여 만든 메서드는 rectangle.width처럼 '값을 가져오는 행위'를 할 때 자동으로 호출.
set을 붙여 만든 메서드는 rectangle.width = 200처럼 '값을 넣는 행위'를 할 때 자동으로 호출.

기본 자료형의 속성이나 메서드를 사용하면 기본 자료형이 자동으로 객체로 변환된다.
기본 자료형 숫자의 속성이나 메서드를 사용할 때는 자동으로 Number 객체로 변환.
기본 자료형은 객체가 아니므로 속성과 메서드를 추가할 수 없다.

Object 객체
Object 객체는 자바스크립트의 최상위 객체이다.
자바스크립트의 가장 기본적인 내장 객체는 Object 객체이다.
toString() 메서드는 객체를 문자열로 변환하는 메서드.
toString() 메서드는 객체를 문자열로 변환할 때 자동으로 호출.
Object 객체에 있는 constructor() 메서드는 객체의 생성자 함수를 의미하며, 자료형을 검사할 때 유용하게 사용.
생성자 함수로 만든 숫자는 객체.
이러한 두 대상을 같은 자료형으로 취급하고 싶을 때는 constructor() 메서드를 사용해야 한다.
Object 객체는 모든 자바스크립트 객체의 최상위 객체이다.
따라서 Object 객체의 포로토타입에 속성 또는 메서드를 추가하면 모든 객체에서 활용할 수 있다.

Number 객체
Number 객체는 자바스크립트에서 가장 단순한 객체로 숫자를 표현할 때 사용.

String 객체
String 객체는 자바스크립트에서 가장 많이 사용하는 내장 객체.
속성
length : 문자열의 길이

기본 메소드
charAt(position) : position 에 위치하는 문자를 리턴.
charCodeAt(position) :  position 에 위치하는 문자의 유니코드 번호를 리턴.
concat(args) : 매개변수로 입력한 문자열을 이어서 리턴
indexOf(searchString, position) : 앞에서부터 일치하는 문자열의 위치를 리턴.
lastIndexOf(searchString, position) ; 뒤에서부터 일치하는 문자열의 위치를 리턴.
match(regExp) : 문자열 안에 regExp 가 있는지 확인.
replace(regExp, replacement) : regExp를 replacement로 바꾼 뒤 리턴.
search(regExp) : regExp와 일치하는 문자열의 위치를 리턴
slice(start, end) : 특정 위치의 문자열을 추출해 리턴.
split(separator, limit) : separator 로 문자열을 잘라서 배열을 리턴.
substr(start, count) : start 부터 count 만큼 문자열을 잘라서 리턴.
substring(start, end) : start부터 end까지 문자열을 잘라서 리턴.
toLowerCase()
toUpperCase()

HTML 관련 메서드
anchor() : a 태그로 문자열을 감싸 리턴
big() :  big 태그로 문자열을 감싸 리턴
blink()
bold()
fixed()
fontcolor(colorString)
fontsize(fontSize)
italics()
link(linkRef)

Math 객체
Math 객체는 자바스크립트의 기본 내장 객체 중 유일하게 생성자 함수를 사용하지 않는 객체이다.
Math 객체의 메서드로 넘겨진 모든 매개변수는 종류에 관계없이 모두 숫자로 변환한다.

ECMAScript 5 Array 객체
Array.isArray()
typeof 키워드로 Array 객체의 자료형을 확인하면 문자열 'object'가 나오므로 Array 객체임을 확인하려면
constructor() 메서드로 자료형을 비교하는 방법을 응용해야 한다.
indexOf()      : 특정 요소를 앞쪽부터 검색
lastIndexOf()  : 특정 요소를 뒤쪽부터 검색
내부에 검색하려는 객체가 있으면 해당 객체가 위치하는 인텍스를 리턴하고 없으면 -1을 리턴.

반복 메서드
forEach() : 배열 각각의 요소를 사용해 특정 함수를 for in 반복문처럼 실행
map()     : 기존의 배열에 특정 규칙을 적용해 새로운 배열을 만듬.

forEach() 메서드의 매개변수로 입력한 함수는 매개변수로 element, index, array 가 있습니다.
매개변수 element는 현재 반복에서 배열의 요소를 뜻하고, 매개변수 index는 현재 반복에서 요소의 인덱스를 뜻함.
매개변수 arrary 의 경우는 현재 반복을 수행하는 배열 자체를 뜻함.

map() 메서드는 배열의 각 요소를 변경해 새로운 배열을 리턴하는 메소드.

filter() : 특정 조건을 만족하는 요소를 추출해 새로운 배열을 만듬.
every()  : 배열의 요소가 특정 조건을 모두 만족하는지 확인
some()   : 배열의 요소가 특정 조건을 적어도 하나 만족하는지 확인.
filter(), every(), some()  - 매개변수로 입력한 함수는 불 자료형 값을 리턴해야 한다.

reduce() : 배열의 요소가 하나가 될 때까지 요소를 왼쪽부터 두 개씩 묶는 함수를 실행.
reduceRight() : 배열의 요소가 하나가 될 때까지 요소를 오른쪽부터 두 개씩 묶는 함수를 실행.


string 객체
trim() : 문자열 양쪽 끝의 공백을 제거

underscore 라이브러리 : JSON 객체, 화살표 함수, 배열을 좀 더 편하게 다룰 수 있음.
JSON.stringify() : 자바스크립트 객체를 JSON 문자열로 반환
JSON.parse()     : JSON 문자열을 자바스크립트 객체로 변환

브라우저 객체 모델
웹 브라우저와 관련된 객체의 집합(window, location, navigator, history, screen, document)으로 웹 브라우저 기능 요소를
직접 관리/제어할 수 있는 특별한 객체 모음.
자바스크립트 프로그래밍 언어를 작동하게 하는 웹 브라우저라는 플랫폼이 제공하는 기능.
브라우저 객체 모델 (BOM, Browser Object Model)은 웹 브라우저와 관련된 객체의 집합을 의미.
window 객체, location 객체, navigator 객체, history 객체, screen 객체, document 객체
window 객체는 자바스크립트의 브라우저 기반 최상위 객체.
screen 객체는 웹 브라우저의 화면이 아니라 운영체제의 화면의 속성을 갖는 객체.
location 객체는 웹 브라우저의 주소 표시줄과 관련된 객체.
location 객체는 프로토콜의 종류, 호스트 이름, 문서 위치 등의 정보가 있다.
location 객체는 페이지를 이동할 때 많이 사용.
assign() 메서드와 replace() 메서드 모두 페이지를 이동하지만 replace() 메서드는 assign() 메서드와 다르게 뒤로 가기 버튼을
사용할 수 없다는 차이가 있다.
window.onload
문서 객체의 속성 중 'on'으로 시작하는 속성을 이벤트 속성이라고 함.
window 객체가 로드가 완료되고 자동으로 할당한 함수를 실행함.
HTML 페이지에 존재하는 모든 태그가 화면에 올라가는 순간이 로드가 완료되는 순간.


**** 문서 객체 모델 ****
문서 객체 모델(DOM, Document Object Model)은 넓은 의미로 웹 브라우저가 HTML 페이지를 인식하는 방식.
좁은 의미로 document 객체와 관련된 객체의 집합.
문서 객체 모델을 사용하면 HTML 페이지에 태그를 추가, 수정, 제거할 수 있음.

document.getElementByID(아이디) : 아이디를 사용해 문서 객체를 선택.
document.querySelector(선택자)  : 선택자를 사용해 문서 객체를 선택.
document.getElementByName(이름) : name 속성으로 여러 개의 문서 객체를 선택.
document.getElementByClassName(클래스) : class 속성으로 여러 개의 문서 객체를 선택.
document.querySelectorAll(선택자) : 선택자로 여러 개의 문서 객체를 선택.

문서 객체의 내부 글자, 스타일, 속성 조작
innerHTML : 내부 글자를 조작.
style : 스타일을 조작.
setAttribute(속성이름, 속성값) : 숙성을 지정
getAttribute(속성이름) : 속성을 추출

- document 객체의 노드 생성 메서드
createElement(tagName) : 요소 노드를 생성.
createTextNode(text) : 텍스트 노드를 생성.

웹 브라우저가 지원하지 않는 속성은 아래의 메서드를 이용해야 함.
setAttribute(name, value) : 객체의 속성을 지정.
getAttribute(name) : 객체의 속성을 가져옴.

innerHTML
인터넷 익스플로러를 제외한 웹 브라우저는 모든 문서 객체의 innerHTML 속성을 바꿀 수 있다.
문서 객체를 수정하거나 삭제할 수도 있다.
만약 HTML 형태의 문자열을 HTML 태그로 넣지 않고 단순 글자로 넣고 싶다면 textContent 속성을 사용.

getElementById(id) : 태그의 id 속성이 id 매개변수와 일치하는 문서 객체를 가져온다.
document 객체의 getElementById() 메서드는 한 번에 한 가지 문서 객테만 가져올 수 있다.
아래의 메서드를 사용하면 한 번에 여러 개의 문서 객체를 가져올 수 있다.
getElementByName(name) : 태그의 name 속성이 name 매개변수와 일치하는 문서 객테를 배열로 가져온다.
getElementByTagName(tagName) : tagName 매개변수와 일치하는 문서 객체를 배열로 가져온다.

getElementByTagName() 메서드로 가져온 객체는 꼭 단순 for 반복문을 사용해야 된다.

querySelector(선택자) : 선택자로 가장 처음 선택되는 문서 객체를 가져옴.
querySelectorAll(선택자) : 선택자를 통해 선택되는 문서 객체를 배열로 가져옴.
CSS 선택자로 문서 객체를 선택하는 메서드.

문서 객체 제거
removeChild(child) : 문서 객체의 자식 노드를 제거.
willRemove.parentNode.removeChild(willRemove) - 많이 사용.

-----------------------------------------------------
이벤트의 종류
마우스 이벤트, 키보드 이벤트, HTML 프레임 이벤트, HTML 입력 양식 이벤트, 유저 인터페이스 이벤트, 구조 변화 이벤트, 터치 이벤트
window 객체의 onload 속성에 함수 자료형을 할당하는 것을 "이벤트를 연결한다"고 함.
load 를 이벤트 이름 또는 이벤트 타입
onload 를 이벤트 속성
이벤트 속성에 할당
문서 객체에 이벤트를 연결하는 방법을 이벤트 모델.
DOM Level 단계에 따라 두 가지 분류.
DOM Level 0
 - 인라인 이벤트 모델
 - 기본 이벤트 모델
DOM Level 1
 - 마이크로소프트 인터넷익스플러 이벤트 모델
 - 표준 이벤트 모델

고전 이벤트 모델
고전 이벤트 모델은 자바스크립트에서 문서 객체의 이벤트 속성으로 이벤트를 연결하는 방법.
이벤트 리스너를 제거할 때는 문서 객체의 이벤트 속성에 null을 넣어줌.
고전 이벤트 모델은 이벤트 하나에 이벤트 리스너 하나만 연결할 수 있음.

이벤트 발생 객체와 이벤트 객체
이벤트 객체를 사용하면 '누가, 언제, 어디서, 무엇을, 어떻게, 왜'를 정의할 수 있다.
이벤트 리스너 안에서 this 키워드를 사용하면 이벤트가 발생한 객체를 찾을 수 있다.
이벤트의 '누가'와 관련된 정보 이외의 정보는 이벤트 객체 안에 들어 있음.
인터넷 익스플로러 8 이하의 버전은 이벤트가 발생할 대 이벤트 객체를 window.event 속성으로 전달하지만,
다른 브라우저는 이벤트 리스너의 매개변수로 전달하므로 이렇게 처리한 것.
참고 - 인터넷 익스플로러9부터는 두 가지 방식을 모두 사용할 수 있다.

이벤트 강제 실행
자수 사용되지는 않음.
적절한 부분에 활용하면 코드의 길이을 많이 줄일 수 있음.
이벤트 속성도 속성이고 함수 자료형을 넣으므로 메서드임.
메서드를 호출하는 것처럼 이벤트 속성을 호출함녀 이벤트가 강제로 실행됨.

-- 인라인 이벤트 모델 --
인라인 이벤트 모델은 HTML 페이지의 가장 기본적인 이벤트 연결 방법.

일부 HTML 태그는 이미 이벤트 리스너가 있다.
이러한 것을 디폴트 이벤트라고 함.

-- 이벤트 전달 --
어떠한 이벤트가 먼저 발생해 어떤 순서로 발생하는지를 이벤트 전달이라고 함.
일반적으로 자바스크립트의 이벤트 전달 순서는 이벤트 버블링 방식을 따름.
이벤트 버블링은 자식 노드에서 부모 노드 순으로 이벤트를 실행하는 것.
이벤트 버블링과 반대되는 개념으로 이벤트 캡쳐링.
이벤트 캡쳐링은 이벤트가 부모 노드에서 자식 노드순으로 실행되는 것.
jQuery : 이벤트 캡쳐링 지원 안 함.
브라우저가 이벤트 전달을 막는 방법 : 이벤트 객체의 stopPropagation() 메서드를 사용.

** 인라인 이벤트 모델이나 고전 이벤트 모델은 한 번에 하나의 이벤트 리스너만을 가질 수 있다.
이러한 DOM Level 0 이벤트 모델들의 단점을 보완하려고 만들어진 이벤트 모델이 DOM Level 2 이벤트 모델이다.
DOM Level 2 이벤트 모델이 DOM Level 0 이벤트 모델보다 나은 점은 여러 번 이벤트를 추가할 수 있다는 점.

-- 표준 이벤트 모델 --
표준 이벤트 모델은 웹 표준을 만드는 단체인 W3C에서 공식적으로 지정한 DOM Level 2 이벤트 모델이다.
한 번에 여러 가지의 이벤트 리스너를 추가할 수 있다.
이벤트 캡쳐링을 지원함.
addEventListener(eventName, handler, useCapture)
removeEventListener(eventName, handler)
매개변수 useCapture는 입력하지 않으면 작동으로 false를 입력.
표준 이벤트 모델은 이벤트 리스너 안에서 this 키워드가 이벤트 발생 객체를 의미한다.

자바스크립트는 특정 숫자를 0으로 나눈다고 해서 문제가 발생하지 않는다.


----------------------------------------------------------------------------------
----------------------------------------------------------------------------------

jQuery

----------------------------------------------------------------------------------
----------------------------------------------------------------------------------

jQuery 는 모든 브라우저에서 동작하는 클라이언트 자바스크립트 라이브러리이다.
문서 객테 모델과 관련된 처리를 쉽게 구현
일관된 이벤트 연결을 쉽게 구현
시각적 효과를 쉽게 구현
Ajax 애플리케이션을 쉽게 개발

$(document).ready() 는 문서가 준비되면 매개변수로 넣은 콜백 함수를 실행하라는 의미.
jQuery 이벤트 메서드 중 하나.
jQuery 의 이벤트 메서드는 표준 이벤트 모델이나 인터넷 익스플로러 이벤트 모델과 마찬가지로 이벤트로 여러 개의 함수를 연결할 수 있음.
자바스크립트에서 식별자로 사용할 수 있는 특수 기호는 $와 _ 입니다.

jQuery 메서드의 기본 형태 - 문서 객체를 다룰 때 사용하는 형태
$('h1').css('color', 'red');
$ 선택자 메서드

- 전체 선택자
CSS의 가장 기본적인 선택자는 전체 선택자.
* 를 전체 선택자

css() 메서드는 jQuery의 가장 기본적인 메서드.
첫 번째 매개변수에 바꾸고자 하는 스타일 속성 이름을 입력.
두 번째 메서드에 스타일 속성 값을 입력.

- 태그 선택자
태그 선택자는 특정한 태그를 선택하는 선택자.
태그 선택자는 태그의 이름을 그냥 사용.
하나 이상의 태그 선택자를 동시에 사용하고 싶을 때, 쉼표로 선택자를 구분.
$('h1, p').css('color', 'red);'

- 아이디 선택자
아이디 선택자는 특정한 id 속성이 있는 문서 객체를 선택하는 선택자.
HTML 웹 표준에 따르면 id 속성은 HTML 페이지 내에서 유일한 값을 가져야 한다.
--> 2개 이상 있어도 실제 실행에는 문제가 없다.
$('#target').css();
$('h1#target').css();

- 클래스 선택자
클래스 선택자는 특정한 class 속성이 있는 문서 객체를 선택하는 선택자.
두 클래스 속성을 모두 갖는 문서 객체를 선택하고 싶을 때는 두 클래스 선택자를 붙여서 사용.
$('.item').css();
$('.item.select').css();

- 자손 선택자와 후손 선택자
자손 선택자와 후손 선택자는 기본 선택자의 앞에 붙여 사용하며, 기본 선택자의 범위를 제한함.
body 태그를 기준으로 할 때 body 태그 바로 아래 있는 div 태그를 자손이라 부르고,
body 태그의 아래에 있는 모든 문서 객체를 후손이라고 부름.
자손 선택자
자손 선택자는 자손을 선택하는 선택자이며 '요소A > 요소B'의 형태로 사용.
후손 선택자
후손 선택자는 이름 그대로 후선을 선택하는 선택자. '요소A 요소B'의 형태.
속성 선택자
속성 선택자는 기본 선택자 뒤에 붙여 사용.
jQuery 속성 선택자
요소[속성=값] : 속성과 값이 문서 객체를 선택
요소[속성|=값] : 속성 안의 값이 특정 값과 같은 문서 객체를 선택
요소[속성~=값] : 속성 안의 값이 특정 값을 단어로 시작하는 문서 객체를 선택.
요소[속성^=값] : 속성 안의 값이 특정 값으로 시작하는 문서 객체를 선택
요소[속성$=값] : 속성 안의 값이 특정 값으로 끝나는 문서 객체를 선택
요소[속성*=값] : 속성 안의 값이 특정 값을 포함하는 문서 객체를 선택
속성 선택자는 입력 양식과 관련된 태그를 선택할 때 많이 사용.
$('input[type="text"]').val('Hello jQuery..!')
val() 메서드는 매개변수를 입력하면 input 태그의 value 속성을 지정하고, 매개변수를 입력하지 않으면 value 속성을 검사함.

- 핕터 선택자
선택자 중에 : 기호를 포함하는 선택자를 필터 선택자
필터 선택자는 기본 선택자 뒤에 사용.
입력 양식 필터 선택자1
요소:button - input 태그 중에 type 속성이 button인 문서 객체와 button 태그를 선택.
요소:checkbox  - input 태그 중에 type 속성이 check인 문서 객체를 선택
요소:file - input 태그 중 type 속성이 file인 문서 객체를 선택.
요소:image - input 태그 중 type 속성이 image인 문서 객체를 선택
요소:passwd - input 태그 중 type 속성이 password인 문서 객체를 선택
요소:radio - input 태그 중 type 속성이 radio인 문서 객체를 선택
요소:reset - input 태그 중 type 속성이 reset인 문서 객체를 선택
요소:submit - input 태그 중 type 속성이 submit인 문서 객체를 선택.
요소:text - input 태그 중 type 속성이 text인 문서 객체를 선택.

입력 양식 필터 선택자2
요소:checked - 체크되어 있는 입력 양식을 선택.
요소:disabled - 비활성화된 입력 양식을 선택.
요소:enabled - 활성화된 입력 양식을 선택.
요소:focus - 초점이 맞추어져 있는 입력 양식을 선택.
요소:input - 모든 입력 양식을 선택(input, textarea, select, button 태그)
요소:selected - option 객체 중 선택된 태그를 선택.

선택된 문서 객체의 val() 메서드를 매개변수 없이 사용하면 입력 양식의 value 속성을 알아낼 수 있음.

- 위치 필터 선택자
jQuery의 위치 필터 선택자
요소:odd - 홀수 번째에 위치한 문서 객체를 선택
요소:even - 짝수 번째에 위치한 문서 객체를 선택
요소:first - 첫 번째에 위치한 문서 객체를 선택.
요소:last - 마지막에 위치한 문서 객체를 선택.

$('tr:first').css('background', '#000000').css('color', '#FFFFFF');
대부분의 jQuery 메서드가 이렇게 체이닝을 사용할 수 있다는 사실을 기억!!

- 함수 필터 선택자
jQuery의 함수 필터 선택자
요소:contains(문자열)  - 특정 문자열을 포함하는 문서 객체를 선택.
요소:eq(n)  - n번째에 위치하는 문서 객체를 선택.
요소:gt(n)  - n번째 초과에 위치하는 문서 객체를 선택.
요소:has(h1) - h1 태그가 있는 문서 객체를 선택.
요소:lt(n) - n번째 미만에 위치하는 문서 객체를 선택
요소:not(선택자) - 선택자와 일치하지 않는 문서 객체를 선택.
요소:nth-child(3n+1) - 3n+1번째에 위치하는 문서 객체를 선택.

** 배열 관리 **
jQuery 로 배열을 관리할 때는 each() 메서드를 이용.
each() 메서드로 매개변수로 입력한 함수로 for in 반복문처럼 객체나 배열의 요소를 검사하는 메서드.
1. $.each(object, function(index, item) {})
2. $(selector).each(function(index, item) {})

- 자바스크립트 배열 관리
$.each(object, function(index, item) {})
매개변수로 넣은 함수의 매개변수 index는 배열의 인덱스 또는 객체의 키를 의미
매개변수 item은 해당 인덱스나 키가 가진 값을 의미

Note : forEach() 메서드와 차이점
ECMAScript 5에서 추가된 forEach() 메서드의 매개변수의 순서가 다르므로 주의!
forEach() 메서드
[].forEach(function(item, index) {});
each 메서드
$.each(function(index, item) {});

- jQuery 배열 관리
jQuery의 배열 객체는 따로 만드는 것이 아니라, 선택자로 여러 개의 문서 객체를 선택할 때 생성된다.
addClass() 메서드는 문서 객체에 class 속성을 추가하는 메서드입니다.
removeClass() 메서드는 문서 객체의 class 속성을 제거하는 메서드입니다.
each() 메서드의 매개변수로 입력한 함수 안에서 this 키워드와 item은 의미가 같음.

- 객체 확장
$.extend() 메서드.
정말 중요한 메서드.

- jQuery 충돌 방지
$.noConflict() 메서드
$.noConflict() 메서드를 사용하고 나면 더 이상 jQuery의 식별자 $를 사용할 수 없습니다.

- $.extend() 메서드를 사용한 옵션 객체 보완
객체를 하나만 넣으면, 객체를 값 복사(깊은 복사)하게 됩니다.


14장 - 문서 객체 선택과 탐색
filter() - 문서 객체를 필터링한다.
end()    - 문서 객체 선택을 한 단계 뒤로 돌린다.
eq()     - 특정 위치에 존재하는 문서 객체를 선택한다.
first()  - 첫 번째에 위치하는 문서 객체를 선택한다.
last()   - 마지막에 위치하는 문서 객체를 선택한다.
add()    - 문서 객체를 추가적으로 선택한다.
is()     - 문서 객체의 특징을 판별한다.
find()   - 특정 태그를 선택한다.

- filter()
1. $(selector).filter(selector);
2. $(selector).filter(function () {});

- end()
문서 객체 선택을 한 단계 뒤로 돌립니다.


특정 위치의 문서 객체 선택
- eq()
특정 위치에 존재하는...
eq() 메서드는 매개변수에 숫자를 입력
음수를 입력하면 뒤쪽을 기준으로 선택.

- first()
첫 번째 위치하는

- last()
마지막에 위치하는














